pipeline {
    agent none 
    stages {
        stage('build') {
            agent {
                docker {
                    image 'python:2.7.16-slim'
	            args '--user root'
        	}
            }
	    when {
	        changeset "**/vote/**"
	    }
            steps {
               echo 'Compiling vote app' 
               dir('vote') {
                 sh 'pip install -r requirements.txt' 
               }
            }
        }
        stage('test') {
            agent {
                docker {
                    image 'python:2.7.16-slim'
	            args '--user root'
        	}
            }
	    when {
	        changeset "**/vote/**"
	    }
            steps {
                echo 'Running Unit Tests on vote app'
                dir('vote') {
                  sh 'pip install -r requirements.txt' 
                  sh 'nosetests -v' 
                }
            }
        }
        stage('docker-package') {
            agent any
            when {
                changeset "**/vote/**"
                branch 'master'
            }
            steps {
                echo 'Packaging vote app with docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                        def workerImage = docker.build("trate/vote:v${env.BUILD_ID}", "./vote")
                        workerImage.push()
                        workerImage.push("${env.BRANCH_NAME}")
                    }
                }
            }
        }

    }
    post {
        success {
            slackSend color: "good", message: "vote pipeline successfully completed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
	}
	failure {
            slackSend color: "danger", message: "vote pipeline failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
	}
        always {
            echo 'Pipeline for vote is complete'
        }

    }
    
}
